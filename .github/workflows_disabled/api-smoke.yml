name: API smoke

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  smoke:
    runs-on: ubuntu-latest

    env:
      APP_ENV: ci
      PORT: 8013
      ROOT: idsideAI_FIXED
      DATABASE_URL: sqlite:///idsideAI_FIXED/app.db

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r $ROOT/requirements.txt
          # minimal tools for verification
          pip install requests

      - name: Init DB
        run: |
          python - <<'PY'
          import os, subprocess, sys
          os.environ["DATABASE_URL"] = os.getenv("DATABASE_URL", "sqlite:///idsideAI_FIXED/app.db")
          subprocess.run([sys.executable, "idsideAI_FIXED/../Downloads/idsideAI_PATCH_MERGE_KIT_251007/init_db.py"], check=False)
          # Fallback: if kit isn't present in CI, create empty sqlite file so app boots
          open("idsideAI_FIXED/app.db","ab").close()
          print({"ok": True, "engine": os.environ["DATABASE_URL"]})
          PY

      - name: Start server (background)
        run: |
          cd $ROOT
          nohup python -m uvicorn backend.app:app --host 127.0.0.1 --port $PORT > ../run.log 2>&1 &
          # Wait for readiness
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$PORT/docs || true)
            [ "$code" = "200" ] && echo "Server ready" && break
            sleep 1
          done
          [ "$code" = "200" ] || (echo "Server failed to start"; tail -n 200 ../run.log; exit 1)

      - name: Verify core endpoints
        run: |
          base="http://127.0.0.1:$PORT"
          set -e
          echo "healthz:" && curl -sf "$base/healthz" | python -m json.tool | head
          echo "whoami:"  && curl -sf "$base/metrics/whoami" | python -m json.tool | head
          echo "plans:"   && curl -sf "$base/billing/plans" | python -m json.tool | head
          echo "packs:"   && curl -sf "$base/policy/packs" | python -m json.tool | head
          echo "analytics:" && curl -sf "$base/analytics/overview" | python -m json.tool | head
          echo "inbox:"   && curl -sf "$base/inbox" | head -n 5
          echo "compose:" && curl -sf "$base/compose/schema" | head -n 5

      - name: Check OpenAPI has required routes
        run: |
          python - <<'PY'
          import json, urllib.request, sys
          base = "http://127.0.0.1:8013"
          spec = json.load(urllib.request.urlopen(f"{base}/openapi.json", timeout=5))
          paths = set(spec.get("paths", {}).keys())
          required = {
            "/org/dev-seed",
            "/policy/packs",
            "/billing/plans",
            "/analytics/overview",
            "/inbox",
            "/compose/schema",
            "/metrics/whoami",
          }
          missing = sorted(required - paths)
          if missing:
            print("Missing required routes:", missing)
            sys.exit(1)
          print("OpenAPI guard passed.")
          PY

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: run-log
          path: idsideAI_FIXED/../run.log
